#pragma once

enum XeKey
{
	XEKEY_MANUFACTURING_MODE = 0x0,
	XEKEY_ALTERNATE_KEY_VAULT = 0x1,
	XEKEY_RESTRICTED_PRIVILEGES_FLAGS = 0x2,
	XEKEY_RESERVED_BYTE3 = 0x3,
	XEKEY_ODD_FEATURES = 0x4,
	XEKEY_ODD_AUTHTYPE = 0x5,
	XEKEY_RESTRICTED_HVEXT_LOADER = 0x6,
	XEKEY_POLICY_FLASH_SIZE = 0x7,
	XEKEY_POLICY_BUILTIN_USBMU_SIZE = 0x8,
	XEKEY_RESERVED_DWORD4 = 0x9,
	XEKEY_RESTRICTED_PRIVILEGES = 0xA,
	XEKEY_RESERVED_QWORD2 = 0xB,
	XEKEY_RESERVED_QWORD3 = 0xC,
	XEKEY_RESERVED_QWORD4 = 0xD,
	XEKEY_RESERVED_KEY1 = 0xE,
	XEKEY_RESERVED_KEY2 = 0xF,
	XEKEY_RESERVED_KEY3 = 0x10,
	XEKEY_RESERVED_KEY4 = 0x11,
	XEKEY_RESERVED_RANDOM_KEY1 = 0x12,
	XEKEY_RESERVED_RANDOM_KEY2 = 0x13,
	XEKEY_CONSOLE_SERIAL_NUMBER = 0x14,
	XEKEY_MOBO_SERIAL_NUMBER = 0x15,
	XEKEY_GAME_REGION = 0x16,
	XEKEY_CONSOLE_OBFUSCATION_KEY = 0x17,
	XEKEY_KEY_OBFUSCATION_KEY = 0x18,
	XEKEY_ROAMABLE_OBFUSCATION_KEY = 0x19,
	XEKEY_DVD_KEY = 0x1A,
	XEKEY_PRIMARY_ACTIVATION_KEY = 0x1B,
	XEKEY_SECONDARY_ACTIVATION_KEY = 0x1C,
	XEKEY_GLOBAL_DEVICE_2DES_KEY1 = 0x1D,
	XEKEY_GLOBAL_DEVICE_2DES_KEY2 = 0x1E,
	XEKEY_WIRELESS_CONTROLLER_MS_2DES_KEY1 = 0x1F,
	XEKEY_WIRELESS_CONTROLLER_MS_2DES_KEY2 = 0x20,
	XEKEY_WIRED_WEBCAM_MS_2DES_KEY1 = 0x21,
	XEKEY_WIRED_WEBCAM_MS_2DES_KEY2 = 0x22,
	XEKEY_WIRED_CONTROLLER_MS_2DES_KEY1 = 0x23,
	XEKEY_WIRED_CONTROLLER_MS_2DES_KEY2 = 0x24,
	XEKEY_MEMORY_UNIT_MS_2DES_KEY1 = 0x25,
	XEKEY_MEMORY_UNIT_MS_2DES_KEY2 = 0x26,
	XEKEY_OTHER_XSM3_DEVICE_MS_2DES_KEY1 = 0x27,
	XEKEY_OTHER_XSM3_DEVICE_MS_2DES_KEY2 = 0x28,
	XEKEY_WIRELESS_CONTROLLER_3P_2DES_KEY1 = 0x29,
	XEKEY_WIRELESS_CONTROLLER_3P_2DES_KEY2 = 0x2A,
	XEKEY_WIRED_WEBCAM_3P_2DES_KEY1 = 0x2B,
	XEKEY_WIRED_WEBCAM_3P_2DES_KEY2 = 0x2C,
	XEKEY_WIRED_CONTROLLER_3P_2DES_KEY1 = 0x2D,
	XEKEY_WIRED_CONTROLLER_3P_2DES_KEY2 = 0x2E,
	XEKEY_MEMORY_UNIT_3P_2DES_KEY1 = 0x2F,
	XEKEY_MEMORY_UNIT_3P_2DES_KEY2 = 0x30,
	XEKEY_OTHER_XSM3_DEVICE_3P_2DES_KEY1 = 0x31,
	XEKEY_OTHER_XSM3_DEVICE_3P_2DES_KEY2 = 0x32,
	XEKEY_CONSOLE_PRIVATE_KEY = 0x33,
	XEKEY_XEIKA_PRIVATE_KEY = 0x34,
	XEKEY_CARDEA_PRIVATE_KEY = 0x35,
	XEKEY_CONSOLE_CERTIFICATE = 0x36,
	XEKEY_XEIKA_CERTIFICATE = 0x37,
	XEKEY_CARDEA_CERTIFICATE = 0x38,
	XEKEY_MAX_KEY_INDEX = 0x39,

	XEKEY_CONSTANT_PIRS_KEY = 0x39,
	XEKEY_CONSTANT_ALT_MASTER_KEY = 0x3A,
	XEKEY_CONSTANT_ALT_LIVE_KEY = 0x3B,
	XEKEY_CONSTANT_MASTER_KEY = 0x3C,
	XEKEY_CONSTANT_LIVE_KEY = 0x3D,
	XEKEY_CONSTANT_XB1_GREEN_KEY = 0x3E,
	XEKEY_CONSTANT_SATA_DISK_SECURITY_KEY = 0x3F,
	XEKEY_CONSTANT_DEVICE_REVOCATION_KEY = 0x40,
	XEKEY_CONSTANT_XMACS_KEY = 0x41,
	XEKEY_CONSTANT_REVOCATION_LIST_NONCE = 0x42,
	XEKEY_CONSTANT_CROSS_PLATFORM_SYSLINK_KEY = 0x43,

	XEKEY_SPECIAL_KEY_VAULT_SIGNATURE = 0x44,
	XEKEY_SPECIAL_SECROM_DIGEST = 0x45,
	XEKEY_SPECIAL_SECDATA = 0x46,
	XEKEY_SPECIAL_DVD_FIRMWARE_KEY = 0x47,
	XEKEY_SPECIAL_DEBUG_UNLOCK = 0x48,
	XEKEY_SPECIAL_DEBUG_UNLOCK_STATE = 0x49,
	XEKEY_MAX_CONSTANT_INDEX = 0x4A,

	XEKEY_TITLE_KEYS_BASE = 0xE0,
	XEKEY_TITLE_KEYS_LIMIT = 0xE8,
	XEKEY_TITLE_KEYS_RESET = 0xF0,

	XEKEY_SECURED_DATA_BASE = 0x1000,
	XEKEY_SECURED_DATA_LIMIT = 0x2000,
};

BOOL ExKeysKeyVaultLoaded();

BOOL ExKeysLoadKeyVault(const uint8_t* decrypted_kv, uint32_t length);
BOOL ExKeysLoadKeyVaultFromPath(const char* filepath);

BOOL ExKeysIsKeySupported(uint32_t key_idx);
BOOL ExKeysGetKey(uint32_t key_idx, uint8_t* output, uint32_t* output_size);
uint8_t* ExKeysGetKeyPtr(uint32_t key_idx);
uint32_t ExKeysGetKeyProperties(uint32_t key_idx);

uint32_t ExKeysGetConsoleCertificate(uint8_t* output);
uint32_t ExKeysGetConsoleId(uint8_t* raw_bytes, char* hex_string);
uint32_t ExKeysGetConsoleType();
uint32_t ExKeysGetConsolePrivateKey(EXCRYPT_RSAPRV_1024* output);

BOOL ExKeysQwNeRsaPrvCrypt(uint32_t key_idx, const uint64_t* input, uint64_t* output);
BOOL ExKeysConsolePrivateKeySign(const uint8_t* hash, uint8_t* output_cert_sig);
BOOL ExKeysPkcs1Verify(const uint8_t* hash, const uint8_t* input_sig, EXCRYPT_RSA* key);

uint32_t ExKeysObscureKey(const uint8_t* input, uint8_t* output);
uint32_t ExKeysHmacShaUsingKey(const uint8_t* obscured_key,
	const uint8_t* input1, uint32_t input1_size,
	const uint8_t* input2, uint32_t input2_size,
	const uint8_t* input3, uint32_t input3_size,
	uint8_t* output, uint32_t output_size);
uint32_t ExKeysHmacSha(uint32_t key_idx,
	const uint8_t* input1, uint32_t input1_size,
	const uint8_t* input2, uint32_t input2_size,
	const uint8_t* input3, uint32_t input3_size,
	uint8_t* output, uint32_t output_size);

uint32_t ExKeysObfuscate(BOOL roaming, const uint8_t* input, uint32_t input_size, uint8_t* output, uint32_t* output_size);
BOOL ExKeysUnobfuscate(BOOL roaming, const uint8_t* input, uint32_t input_size, uint8_t* output, uint32_t* output_size);
